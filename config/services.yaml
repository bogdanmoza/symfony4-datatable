# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    movie_api:
      key: '6a0978b208e21d510a9733fab1aad02a'
      request_token: 'https://api.themoviedb.org/3/authentication/token/new'
      create_session: 'https://api.themoviedb.org/3/authentication/session/new'
      authenticate_user: "https://www.themoviedb.org/authenticate/"
      redirect_to: http://sf4.local:8084/authenticate-movie
      session_id: '6e9af62d6896f080b118fba43f43a15072d37bf5'
      popular_movies: "https://api.themoviedb.org/3/movie/popular"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
        arguments: ['@movie.api']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    movie.api:
      class: App\Service\MovieApi
      public: true
      arguments: ['@service_container']